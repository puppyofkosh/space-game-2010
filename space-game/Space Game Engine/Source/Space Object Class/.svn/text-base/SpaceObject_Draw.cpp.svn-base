#include "SpaceObjectClass.h"

#include <stdlib.h>
#ifdef __APPLE__
#include <OpenGL/OpenGL.h>
#include <OpenGL/gl.h>
#include <OpenGL/glu.h>
#define NO_VBOS
#endif
#ifdef _WIN32
#include <windows.h> // these two header files are needed to compile a program in OpenGL with GLUT
#include <GL/glut.h>
#include <GL/glu.h>
#include <GL/gl.h>
#endif
#ifdef __linux__
#include <GL/glut.h>
#include <GL/glu.h>
#include <GL/gl.h>
#define NO_VBOS
#endif 

#include "../VBO/VBOExtend.h"


//#include "../ImageLoad.h"
void SpaceObject::draw()
{
	glMatrixMode (GL_MODELVIEW);
	glEnable (GL_TEXTURE_2D);//needed to render the texture

	if (alpha == true)
	{
		glEnable (GL_BLEND);//This eliminates the black background
		glBlendFunc (GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
	}

	glPushMatrix();//save the current matrix
	
		glTranslatef ((xPos), (yPos), 0);//
		
		glRotatef (rotation, 0, 0, 1);//Now we rotate the matrix so it looks like the OBJECT has been rotated
	
		//Enable ClientStates
		glEnableClientState( GL_VERTEX_ARRAY );
		glEnableClientState( GL_TEXTURE_COORD_ARRAY );
		//Activate arrays
		glBindBufferARB( GL_ARRAY_BUFFER_ARB, VBOID);
		glVertexPointer( 3, GL_FLOAT, 0, 0 );

		//vbo to hold the texture
		glBindBufferARB( GL_ARRAY_BUFFER_ARB, texCoordID);
		//Activate texture
		glBindTexture( GL_TEXTURE_2D, texID);
		//Assign array
		glTexCoordPointer( 2, GL_FLOAT, 0, 0 );

		glDrawArrays (GL_QUADS, 0, 12);//Render it

		//Clear ClientState
		glDisableClientState( GL_VERTEX_ARRAY );
		glDisableClientState( GL_TEXTURE_COORD_ARRAY );

	glPopMatrix();//bring us back to the saved matrix. This makes it appear as if the object just rendered has moved.

	if (alpha == true)
	{	
		glDisable(GL_BLEND);
	}

	glDisable(GL_TEXTURE_2D);
}